{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","sortQuotes","quotes","ascending","sort","quoteA","quoteB","QuoteList","history","useHistory","location","useLocation","isSortAsc","URLSearchParams","search","get","sortedQuotes","sorting","onClick","push","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","data","status","useEffect","LoadingSpinner"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,gGCmB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBCPAO,EAAa,SAACC,EAAQC,GAC1B,OAAOD,EAAOE,MAAK,SAACC,EAAQC,GAC1B,OAAIH,EACKE,EAAOL,GAAKM,EAAON,GAAK,GAAK,EAE7BK,EAAOL,GAAKM,EAAON,GAAK,GAAK,MAuC3BO,EAlCG,SAACd,GACjB,IAAMe,EAAUC,cACVC,EAAWC,cAEXC,EAAwC,QAD1B,IAAIC,gBAAgBH,EAASI,QACnBC,IAAI,QAC5BC,EACFf,EAAWR,EAAMS,SADAU,GAQrB,OACE,eAAC,WAAD,WACE,qBAAKlB,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAPY,WACxBV,EAAQW,KAAR,uBAA6BP,EAAY,MAAQ,SAM7C,kBACQA,EAAY,aAAe,iBAGrC,oBAAIlB,UAAWC,IAAQyB,KAAvB,SACGJ,EAAaK,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,a,gBCVRuB,UAlBG,SAAC9B,GACjB,MAAsC+B,YAAQC,KAAc,GAApDC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,OAM3B,OAJAC,qBAAU,WACRH,MACC,CAACA,IAEW,YAAXE,EAEA,sBAAKlC,UAAU,WAAf,UACE,cAACoC,EAAA,EAAD,IADF,OAMG,cAAC,EAAD,CAAW5B,OAAQyB,GAAQ","file":"static/js/5.df25aba8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useHistory, useLocation } from 'react-router';\nimport { Fragment } from 'react';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortAsc = queryParams.get('sort') === 'asc';\n  const sortedQuotes = isSortAsc\n    ? sortQuotes(props.quotes, true)\n    : sortQuotes(props.quotes, false);\n\n  const toggleSortHandler = () => {\n    history.push(`/quotes?sort=${isSortAsc ? 'dsc' : 'asc'}`);\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={toggleSortHandler}>\n          Sort {isSortAsc ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import LoadingSpinner from '../components/UI/LoadingSpinner';\nimport QuoteList from '../components/quotes/QuoteList';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\nimport { useEffect } from 'react';\n\n// const DUMMY_QUOTES = [\n//   { id: 'q1', author: 'Sai', text: 'A quote is a quote' },\n//   { id: 'q2', author: 'Shiva', text: 'A mot is a mot' },\n// ];\n\nconst AllQuotes = (props) => {\n  const { sendRequest, data, status } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner></LoadingSpinner>;\n      </div>\n    );\n  }\n\n  return <QuoteList quotes={data || []}></QuoteList>;\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}